7가지 순서를 반드시 기억할 것.

1) 드라이버 로드 
String driver = "오라클 드라이버 위치"
** Class.forName(driver))

2) DB연결
conn, stmt, rs 객체를 각각 생성하자.
String url = 접속 url. thin:@localhost:1521:xe"
** conn = DriverManager.getConnection(url, 아이디,비번)

3) statement객체 생성
** stmt = conn.createStatement(): // sql 전송객체 만듬.

4~5) 각 테이블의 값의 타입에 맞게 객체를 만들고, 결과를 각각 rs.next타입(테이블이름) 으로 받아옴.
** rs = stmt.executeQuery (sql) : 위에 적어둔 sql문을 가져와 전송하고, 그 결과를 출력함.

6) 각 로직을 필요할 떄까지 반복하는 등은 do {   } while  사용
ex)  
do { String ename = rs.getString("ENAME"); ...
} while (rs.next()); 다음값이 있는 동안 반복. 없으면 빠져나옴.

7) 반드시 각 객체를 연결 해제할 것.
if rs!=null rs.close(); stmt!=null stmt.close(); conn!=null conn.close();


**순서외우자!
Class.forname
conn = DriverManager.getConnection
stmt = createStatement
rs = executeQuery

-- 기타 --
query중 ' 를 무시해선 안됨. "'" 와 같은 식으로 감싸기엔 틀릴 확률이 많고 번거로우므로,
String.format을 이용하는 것이 더 편리.

String sql = "SELECT * FROM DEPT WHERE DNAME =  UPPER('" + dname2 + "')"; 
sql = String.format("SELECT * FROM DEPT WHERE DNAME= UPPER('%s')", dname2);
String.format 사용시 오라클에서 쿼리를 가져올 때 쿼리조건만 %s로 바꾸고 뒤에 변수만 추가해주면 됨.

statement의 업그레이드 버전은 preparedstatement.
완벽한 쿼리문 대신, 유저가 입력할 부분을 ? 로 메꾸고,
각 값을 콘솔 (scanner)로 받은 뒤, 해당 값을 setInt, setString(자릿수,콘솔객체) 로 채우는 방법도 가능.
따옴표를 무시할 수 있기에 statement보다 편리.