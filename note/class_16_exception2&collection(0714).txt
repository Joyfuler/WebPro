---- exception
외부요인으로 인한 에러가 발생한 곳에 직접 try { catch를 이용하여 예외 처리를 할 수도 있지만,
상속을 받은 곳으로 예외처리를 throw하는 방법도 있음. (일종의 짬처리) 단, 어딘가에선 try&catch를 이용해 해결해야 함.
main까지 exception을 throw하는 경우 100% 예외가 발생하지 않는다는 확신이 들지 않는다면 프로그램이 멎을 수 있으니 주의할 것.
(exception은 상위 exception을 넣어도 무방하나 순서에는 주의할 것. 모든 것을 포함하는 exception이 위에 들어가면 각기 다른 예외 케이스에 대응하지 못하게 되므로 밑에 넣자.)
한편, 강제로 예외를 발생시키는 케이스도 존재함. (은행 계좌에서 돈을 출금하려 하는데 잔액이 부족할 때, 도서가 연체되었을 때의 반납 처리 과정 등)
 
-- collection
배열은 본래 한 번 길이가 정해지면 그 이상의 데이터를 넣을 수 없음. 이러한 단점을 해소하기 위해 나온 것이 ArrayList. 기존 객체와 동일하게 ArrayList를 선언하고 <String>
arraylist.add(String a); 를 통해 무제한으로 추가가 가능함. 또한 index를 선택해서 추가할 수도 있음. * arrayList.add(1, "str1111"); 로 생성할 때, 원래 1번 인덱스에 있던 배열값은 2번으로 밀려남.
반대로, arrayList.remove(2);  remove("str222"); - (배열 안에 든 값을 직접 입력)
등으로 해당 인덱스의 값을 지울 수도 있음. 이 경우는 반대로 뒤에 있던 인덱스가 한칸씩 올라옴. (기존 배열과의 차이)

arraylist의 배열 길이를 조회하고 싶다면 arrayList.size(); 로 출력할 것.
일반 for문을 통해 arraylist의 각 index값을 출력하고 싶다면, arrayList.get(i)를 통해 출력하자. (기존 배열은 array[i] 로 출력하므로 차이점에 주의할 것.)