start.spring.io 를 통해 프로젝트를 만들 수도 있음.
project이름과 버전 선택, java language, jar packaging, 의존할 라이브러리 추가.
generate를 하면 압축파일이 다운로드됨. 프로젝트 폴더에 압축 풀고 import
특히 자바 17 환경인 경우 gradle을 주로 사용..

---
gradle로 프로젝트 생성시 pom.xml이 없음. --> build.gradle에서 확인은 가능

기존 컨트롤러의 경우는 String 타입의 메소드를 만들고 return하는 값을 view페이지로 갔지만,
json객체나 메시지 등을 보낼 수도 있다.
이 때는 어노테이션을 @ResponseBody로 설정.

@ResponseBody
public String confirm(@RequestParam(value"name", defaultValue = "아무개") String name{
return name + "님 반갑습니다.";

혹은 public Person confirm (@RequestParam(value="age" defaultVallue = "5" int age){
	Person person = new Person(name, age);
	return person;
	결과 json형식의 person객체가 출력된다.

요청경로 우선순위 1순위는 컨트롤러, 2순위는 static의 해당 문서명.
헤더나 푸터 등 페이지에서 include할 페이지들은 templates / fragments 폴더에 만들어 넣는다.
이후 헤더나 푸터에
<th:block th:fragment="headerFragment">
사이에 헤더 내용을 넣어준다. (페이지 전체를 include하는 것이 아니라, 일정 부분 태그만 넣는 것.
</th:block>
완료한 후, main.html등에서는
<th:block th:replace="fragments/header :: headerFragment"/>로 헤더 내용을 가져올 수 있음.

자바 8까지는 상세보기 등에서 해당 dto 객체를 리턴하고 null인 경우 그대로 null을 리턴했지만,
자바 11부터는 public Optional<Friend> findById(Long id);
처럼 Optional을 넣어 예외가 발생하도록 함. -> 테스트 용이 용도
-----

완료된 프로젝트를 배포하는 방법
gradle인 경우 프로젝트에 gradlew 파일이 생성된다. 이를 cmd창에서
gradlew build 입력한다. 이후 build 폴더가 생성되며 libs 폴더 안에 jar파일이 생성됨.
이 jar 파일을 사용자 pc에서 실행하면 해당 프로젝트가 실행된다. (단, java 자체는 설치해야 함)

-----

실제 데이터를 db에 넣는 것이 아니라 Hashmap등에 넣고 테스트하는 방법 ... (intellij에서 테스트가 수월)
private static Map<Long, Friend> store = new HashMap(); 을 하여 store라는 맵을 만든다.

-- 데이터 입력
시퀀스는 변수를 설정하고, ++을 통해 1씩 증가.
friend.setId(++sequence);
store.put(sequence,friend);

-- 리스트 출력
null로 반환될 것을 대비하여 Optional<Friend> 설정.
return Optional.ofNullable(store.get(3));  // 키값을 가지고 데이터를 반환할 수 있음. 널인경우는 예외

-- 출력되는 값이 여러 건인 경우
Map은 정해진 순서가 없으므로, 이를 Iterator라는 배열 객체로 치환하여 id를 순서화함.
Iterator<Long> iterator = store.keySet().iterator();
Long id = iterator.next(); //
Friend friend  = store.get(id);
return Optional.ofNullable(friend);
...

모든 값을 가져오는 경우
public List<Friend> findAll(){
return new ArrayList<>(store.values()); // hashmap의 키를 제외하고 값만 가져와 리턴.

삭제를 원하는 경우
hashmap의 clear 사용
public void deleteAll(){
store.clear();


-------

테스트 방법 - test 폴더 밑에 테스트할 클래스와 동일한 패키지명으로 패키지를 생성한다.
(시스템은 내부적으로 같은 폴더로 인식함)
테스트할 클래스와 동일한 이름 +Test로 클래스 생성
원본 클래스를 가지고 새로운 객체를 생성하고 @Test 어노테이션을 건다. 
이후 원본과 동일한 메소드를 생성하고 더미데이터를 입력해준다.
intellij인 경우 메소드 옆에 실행 버튼이 생기고, 해당 메소드만 일시적으로 테스트가 가능

FriendRepository repository = new FriendRepositoryImpl();
    @Test
public void save(){
Friend friend = new Friend("홍길동", "010-9999-9999");
repository.save(friend); // dao에 해당 데이터를 넣는다.
Frind resultTel = repository.findByTel("010-9999-9999").get();
// findByTel도 동시에 정상인지 테스트. 문제가 없다면 위 넣은 데이터와 아래 넣은 데이터를 비교했을 때 같음이 리턴됨.
assertThat(friend).isEqualTo(resultTel);
system.out.println("테스트 정상");
}
assertThat에서 문제가 없다면 아랫줄이 수행되며, 문제가 발생시 중단됨.
각 메소드별 테스트가 문제가 없더라도, 클래스 단위로 테스트를 실행시
위 메소드와 아래 메소드에 추가/변경한 데이터 내용이 중복되며,
순서나 sq 등의 데이터가 서로 달라 에러가 발생할 수 있으니 주의
(클래스로 테스트시 가져오는 데이터가 가장 위이므로 값이 서로 바뀔 수 있음).
따라서 테스트시는 각 메소드별로 테스트한 내용을 모두 없애주어야 함.
@Test 어노테이션 위에 @AfterEach 를 하여 모든 메소드 수행 후 delete하는 메소드를 넣어주자.


@AfterEach
public void afterEach(){
repository.deleteAll();

모든 테스트를 통과하면 각 메소드 옆에 파란불이 들어오게 됨.
@Autowired 를 사용하고 싶다면 Test 클래스 위에 @SpringBootTest를 붙이고
repositoryImpl.java에 @Repository 어노테이션을 붙이면 사용 가능...
(new를 사용하지 않고 private FriendRepository repository; 등으로 이용됨)

테스트를 직접 쳐서 만들 수도 있지만, ctrl + shift + t를 눌러 테스트 클래스 껍데기를 만들게 할 수 있다.


---

최근 추세의 경우 어노테이션 @Repository, @Autowired 등을 사용하지 않는 경우도 있음.
이 경우는 java를 이용한 bean생성을 사용.

SpringBeanConfig.java
@Configuration

public class SpringBeanConfig{
	@Bean
	public FriendRepository friendRepository(){
	return new FriendRepositoryImpl();	

	@Bean
	public FriendService friendService(){
	return new FriendServiceImpl(friendRepository());


을 이용하여 자바에서 bean을 생성하여 쓸 수 있게 됨. @Service, @Repository, @Autowired 모두 사용할 필요가 없게 된다.
(자바로 bean을 만든 후 @Repository 등을 남겨두는 경우, 똑같은 것이 2개가 생겨서 혼선이 생김. 삭제 필요)