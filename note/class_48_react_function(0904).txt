컴포넌트를 class로 만들 수도 있지만, function을 통해 코드 길이를 약간 절약할 수 있음.
class의 경우는 this.props가 상당히 많이 쓰이지만, function은 매개변수로 props를 받으므로
this.props를 꼭 쓰지 않아도 된다.

rendering할 때 바뀌는 mode 변수를 단순히 바꾸기만 해서는 렌더링할 때
바뀐 모드에 따라 다른 화면을 출력하는 렌더링은 적용되지 않는다. (f12를 했을 때 mode값은 변경되나, 그에 따른 화면 변경사항이 없음)
class의 경우에는 이 경우 setState를 이용하였는데, 함수의 경우는 hook (Usestate -> 를 이용함.
(app에서 하위로 데이터를 전달할 때에는 props를 통해 전달하고,
하위에서 app으로 데이터를 전달할 때에는 event (함수)를 통해 return한다.)

만일 수정이나 삭제 등을 할 때, 원본을 그대로 수정이나 삭제하면 오류가 발생하는 등 위험이 발생하니,
_ (언더바) 등을 사용하여 데이터를 복제 (Array.from() / [...] 하고, 카피본의 데이터를 변경한 후, set함수를 통해 변경해 주는 것이 안전함.

-- 자동완성이 되지 않는 경우 폴더/파일 위치, 세이브 여부 확인! (src밑을 연 상태에서 실행하자)
-- 리액트에 있는 각종 모듈을 모두 사용하는 것보단, 웹팩을 사용해 용량 등 절약이 가능.
  <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
3가지를 script로 넣어 사용하자.
만일 프로젝트에 사용한다면 웹팩을 사용해서 넣을 것.
