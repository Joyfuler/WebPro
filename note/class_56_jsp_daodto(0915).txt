dto를 만들때에는 쿼리문을 먼저 실행해보고, 결과값으로 나온 테이블명과 변수를 동일하게 설정.
또한 input의 parameter(name)역시 똑같이 설정해 주어야 함.

dto --> 변수선언 / 기본메소드 선언 / 변수를 주고받도록 매개변수가 있는 메소드 선언 / get&set 선언
dao -> driver 접속 후 결과를 받을 ArrayList<Dto>타입의 함수를 출력.
결과가 없을 경우를 대비하여 ArrayList<Dto> dtos = new ArrayList<Dto>(); 를 선언 (빈 값)
이후 평소와 동일하게 접속 + 변수별로 값 가져오기를 한 후, dtos.add(new Dto(각 변수) 를 통해 추가해준다.
받아오는 곳에서는 Dao의 기능을 사용할 수 있도록 getInstance를 한 객체를 만든다.
Dao dao = Dao.getInstance();
이후 테이블 값을 가져올 ArrayList dto 객체를 소환.
ArrayList<Dto> dtos = dao.List(); // dao 클래스에 있던 list 함수를 실행 ( sql 값 던진 후 값을 배열로 가져온 함수)
for문을 이용하여 Arraylist dtos의 값을 출력하면 완성.


*어제 복습..
같은 페이지에서 form action ="" 로 넘어가지 않는다면 사용자가 선택할 값은 db에서 값을 자동으로 가져오게 하자.
<option value = 배열.getName()>을 통해 가져올 수 있음.

* 싱글톤 복습..
dao 내의 기능을 다양한 곳에서 사용하기 위해 dao객체를 다수 생성할 수 있음.
따라서 무분별한 객체 생성을 막기 위해 기본메소드를 private로 설정하고, dao를 타입으로 가지는 INSTANCE 변수를 생성함.
private static DeptDao INSTANCE = null;
이후 getInstance 함수 안에서 INSTANCE를 객체로 만들고, 그 INSTANCE를 리턴하여 다른 곳에서 받을 수 있도록 함.
ppublic static DeptDao getInstance(){
이후 instance객체를 받은 변수는 해당 클래스의 메소드를 사용할 수 있음.
Dao dao = Dao.getInstance(); -> dao.method();

insert,update등 문구가 실행되면 1, 실패하면 0이 출력됨.
해당 숫자를 그대로 가져오는 것보다는, 가독성을 높일 수 있도록 상수변수로 입력하는 것이 좋음.
ex) public static final int SUCCESS = 1; 
public static final int FAIL = 0;

최대한 객체로 처리하는 습관을 들일 것. (driver 접속시의 connection 역시 객체로 변경해 가져올 수 있음.
이후 conn = getConnection(); 등으로 함수를 불러 아이디/비밀번호를 직접 치는 수고를 덜거나,
추후 아이디/비밀번호가 변경되었을 때 함수에 있는 아이디/비밀번호 값만 바꾸기만 해도 됨.