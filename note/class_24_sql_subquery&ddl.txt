EXISTS : 서브쿼리 결과가 존재하면 참. EXISTS의 경우 서브쿼리가 단독 (F9) 실행되지 않는 것이 특징임.
-- 직속부하가 있는 직원들의 사번, 이름, 급여
SELECT EMPNO, ENAME, SAL FROM EMP M WHERE EXISTS (SELECT * FROM EMP WHERE M.EMPNO = MGR); --  EXISTS 서브쿼리를 이용
SELECT DISTINCT E2.EMPNO, E2.ENAME, E2.SAL FROM EMP E1, EMP E2 WHERE  E1.MGR = E2.EMPNO; -- 셀프조인을 이용
-- 직속부하가 없는 직원들의 사번, 이름, 급여
SELECT EMPNO, ENAME, SAL FROM EMP M WHERE NOT EXISTS (SELECT * FROM EMP WHERE M.EMPNO = MGR); -- 존재X시 NOT을 붙여서 출력
SELECT E1.ENAME, E2.EMPNO, E2.ENAME, E2.SAL
FROM EMP E1, EMP E2
WHERE E1.MGR(+) = E2.EMPNO AND E1.MGR IS NULL; 
(셀프조인 + 아우터조인까지 활용해야하므로 불편할 수 있지만, SQL은 쿼리 조건만 부합하면 되므로 크게 상관은 없다)

-------- 

DDL- 테이블 생성, 추가, 제거 및 수치 변경
CREATE TABLE BOOK (테이블명)
BOOKID NUMBER(4) -- 필드명과 타입을 지정함.
...
PRIMARY KEY (BOOKID) -- 중복되서는 안 되는 유니크한 키를 설정해 줌. 혹은 해당 필드를 만들 때 옆에 추가하는 것도 가능.
);
이전 실습에 사용하던 DEPT 테이블의 DEPTNO처럼, 다른 테이블이 참조하는 데이터를 외래키라 부름.
DEPTNO NUMBER(2) REFERENCES DEPT01 (DEPTNO) -- DEPT01중 DEPTNO에 저장된 값만 입력할 수 있도록 FK를 설정.

데이터 생성 시에는 쿼리를 사용하여 해당 데이터의 전체, 혹은 일부를 가져올 수도 있음. (주로 백업 용도로 사용)
CREATE TABLE EMP02
AS
SELECT * FROM EMP; (EMP의 전체 테이블을 사용)

CREATE TABLE EMP03
AS
SELECT EMPNO, ENAME, DEPTNO FROM EMP; (EMP 테이블의 일부 필드를 가져와서 생성)

필드 추가 및 수정, 삭제 (ADD,MODIFY, DROP)
ALTER TABLE 테이블명 명령어 ( ) 형태로 사용.
ALTER TABLE EMP03 ADD (JOB VARCHAR2(20), SAL NUMBER(7)); 등으로 필드를 추가함. (추가된 필드 값은 NULL)
ALTER TABLE EMP03 MODIFY (JOB NUMBER(4)); JOB 필드의 타입을 4자리수의 NUMBER로 수정함.
ALTER TABLE EMP03 DROP COLUMN JOB; (JOB 필드를 삭제.)
DROP TABLE EMP01; (테이블 자체를 삭제) - DROP은 ROLLBACK이 불가능하며, 데이터가 날아갈 위험이 있으므로,
실무에서는 각별히 사용에 주의할 것.

* 데이터 사전
데이터의 구조가 바뀌거나, 데이터가 추가/제거/수정되는 등 변경될 때 데이터 사전이 자동으로 업데이트됨.
유저가 소유하고 있는 권한에 따라 열람할 수 있는 데이터가 달라짐.
데이터 종류는 TABLE(테이블), CONSTRAINTS(제약조건), VIEW(뷰), INDEX(인덱스).
열람권한 종류는 USER(현재 유저가 소유한 객체), ALL(현재 유저가 열람 가능한 객체), DBA(현재 유저가 DBA 권한인 경우 접근 가능한 객체)

---

DML - 데이터 내부의 필드를 추가, 변경, 삭제할 수 있는 명령어로 ROLLBACK을 사용 가능.
INSERT INTO DEPT1 VALUES (값) 등으로 사용. 값은 필드 수에 맞게 추가해야 하며, 값 추가를 원하지 않는 경우 NULL로 입력.
INSERT INTO 역시 서브쿼리를 사용하여 추가 가능. EX) INSERT INTO DEPT01 SELECT * FROM DEPT WHERE DEPTNO BETWEEN 10 AND 30;
COMMIT은 변경한 데이터를 영구적으로 반영하는 명령어.
ROLLBACK은 변경을 취소하는 명령어이며, COMMIT한 후부터의 데이터 작업만 취소할 수 있음 (이미 COMMIT된 데이터는 롤백불가)

UPDATE 테이블 필드명1=값1, 필드명2 =값2 (필드의 값을 수정하는 작업).. 해당 필드의 값이 모두 변경되므로, 만일 특정 위치만 바꾸고 싶다면 WHERE를 활용하자.