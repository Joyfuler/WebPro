(각 변수들이 state의 어떤 부분을 대입한 것인지를 체크하자!)

1) Create
각 버튼을 control.js에 넣고, 버튼을 클릭시 이벤트를 발생시켜 mode를 create로 변경.
<button onClick = {() => {
this.props.onChangeMode('create'); 
}}> Create </button>

이후 onChangeMode 함수를 CreateCotent.js를 만들어 새로 정의.
title과 desc 내용을 입력받기 위해, form 태그 및 input을 사용함. 단, form태그는 본래 기능을 사용하지 못하도록,
preventDefault()를 통해 막고, onSubmitCreate함수를 새롭게 생성.

<form onSubmit = { e => {
e.preventDefault();  // 여기에서 들어오는 변수 e는 본래 기능을 가진 태그를 가리키는 것. 여기서는 바로 앞의 form 버튼을 의미)
this.props.onSubmitCreate(e.target.title.value, e.target.desc.value)
<input type = 'text' name = "title">~
<textarea name = "desc>~
* e.target.title.value는 크롬의 콘솔 창에서 title과 desc의 값을 찾아, target 내부에 있는 것을 확인해 넣은 것.

함수가 완성되었으면, App.js로 돌아가 Control 컴포넌트에 onChangeMode 함수를 넣고, 매개변수를 control.js에 넣었던 매개변수가 들어오도록 해주자.
(create의 경우 this.props.onChangeMode('create')로 입력되었음)
<Control onChangeMode = { function (_mode) {
this.setState({mode : _mode});
}}> </Control>


2) Update

Create와 크게 차이는 없으나, input창에 선택한 메뉴의 title / content를 표시해야 함. 따라서 해당 배열을 가리킬 수 있는 id 변수도 필요.
UpdateContent.js에 constructor(props)를 해준 후,
this.state = {
id: this.props.data.id,
title: this.props.data.title,
desc : this.props.data.desc, };

마찬가지로 form onSubmit에 preventDefault를 걸어 submit를 막고, 대신
this.props.onSubmitUpdate 함수를 실행하도록 한다.

<form onSubmit = {e => {  // 마찬가지로 e는 바로 앞의 form 버튼을 의미함.
e.preventDefault();
this.props.onSubmitUpdate(e.target.id.value, e.target.title.value, e.target.desc.value);

수정 시에는 id 데이터도 필요하니, 매개변수 또한 3개가 들어감.
이후 setState를 통해 각 input값의 속성을 변경한다.
input name = "title" value = {this.state.title} onChange = {function(e){
this.setState({
title : e.target.value})}.bind(this); 와 같은 식으로 속성값을 변경해줌.

이후 App.js안에 UpdateContent 컴포넌트 안에 값을 입력.
<UpdateContent data {_content}
onSubmitUpdate = {function (_id, _title, _desc){   (매개변수는 3개가 들어감!)
var contents = Array.from (this.state.contents) // 렌더링 시의 오류를 피하기 위해, 똑같이 생긴 배열을 복사해 임시로 저장.
_contents.length만큼 for반복문을 돌린 후, id가 서로 일치하면 값을 변경하자.

for (var idx =0; idx < _contents.length; idx++){
if (_contents[idx].id === Number(_id)) {
_contents[idx] = {id: Number(_id), title: _title, desc:_desc;};
이후 setState를 통해 값을 실제로 변경하고, mode를 read 상태로 전환.
this.setState({
contents: _contents,
mode: "read",
});


3) Delete
해당 데이터를 날리기만 하면 되는 delete의 경우 js가 따로 필요하지 않음.
control 컴포넌트에서 delete 버튼을 누를 시 onChangeMode가 실행되고 매개변수로 delete가 들어감.
if (_mode === "delete"){
if (this.state.selected_content_id != 0)  (기본값인 welcome일때는 삭제할 수 없도록)
var _contents = Array.from(this.state.contents) 안전을 위해 contents를 복사해 둔 후,
배열을 통해 id가 일치하는 곳을 찾아 해당 값을 splice 해준다.
for (var idx =0; idx < _contents.length; idx++){
if (_contents[idx].id === this.state.selected_id){
_contents.splice(idx,1);
break;

마지막으로 setState를 통해 지워진 _contents의 값을 contents로 대입하고, mode와 id를 기본 상태로 초기화.
this.setState({
contents : _contents,
mode : 'welcome',,
selected_content_id : 0,
});



