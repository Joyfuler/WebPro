model1에서는 페이징 처리가 된 게시판을 만들 때,
list.jsp에서 페이지와 row 계산 등을 모두 처리하였음.

mvc 패턴에서는 페이지 계산 등 자바가 들어가는 요소들을 listservice.java(model) 에 넣는다.
페이징이므로 pageNum 패러미터를 받아 startRow, endRow, startPage, endPage를 계산.

view단에서 el을 사용할 때 getbid() 대신 bid로 입력하지만, 실제로는 getbid를 알아서 바꿔준 것.
dto단에서는 getter & setter를 하지 않으면 오류가 발생하니 주의.

반복해서 주의할 것! write나 update등 시행하고 다시 리스트 페이지로 돌아가기 위해
viewPage = "board/list.jsp" 로 경로를 정해주면 아무것도 출력되지 않음.
(list.do 명령을 받아 arrayList 출력할 수 있는 상태가 아니면 데이터가 없음)
따라서 "list.do"로 설정하여 글작성 / 글수정 후 리스트가 정상적으로 출력되도록 조정.

수정한 후 상세보기에서 조회수를 올리길 원하지 않는다면 parameter에 after를 추가한다.
만일 after 패러미터가 존재한다면 nothitup 메소드를, 없다면 일반적인 게시글 상세보기 메소드를 출력.

<pre> 태그는 글내용 (<textarea> 등)을 출력할 때 사용. 
사용자가 엔터나 탭, 혹은 스페이스를 여러 번 입력했을 때 해당 내용을 그대로 출력하도록 함.

write.do 명령을 수행하는 경우 처음엔 view단으로 보내기만 하지만,
update.do (글수정) 명령을 수행하는 경우엔 원글의 정보를 받아와야 하므로 게시글의 dto 정보를 출력하는 service를 우선 실행해야 함.
이후 실제로 유저가 글을 수정하고 수정 버튼을 눌렀을 때는 update하는 메소드를 가진 service를 수행할 것.

requestdispatcher를 이용하여 forward를 하는 경우 주소창이 변경되지 않음.
따라서 모든 페이지에 setAttribute를 하지 않아도 view단에서 입력한 패러미터가 service를 거쳐 원래 페이지로 돌아갈 때까지 유지된다.
bid나 pageNum등을 모두 setAttribute를 할 필요가 없음.

각 글작성의 성공 및 실패 결과는 list.jsp에서 패러미터를 받아 <c:if test = > 를 통해 성공인지 실패인지를 판별하고
alert로 알림.
단, 상세 글보기 -> 글수정 -> 상세글보기로 돌아가는 경우에는 content.jsp에 c:if 와 alert를 따로 넣어줄 것.