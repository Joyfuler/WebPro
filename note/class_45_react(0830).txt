
자바스크립트를 처음부터 완성하기보단, 어느정도 완성되어 있는 제품(프레임워크)에 개발자가 일부 추가하는 방식을 사용하므로 개발시간이 단축됨.
1) object - 깊은 복사
기존과 다르게 ...을 사용
var copyArray = memberArray; 와 같이 사용시 해당 객체의 주소만 동일하게 참조하므로,.
copyArray의 값을 바꾸면 memberArray의 값도 바뀌는 문제가 있음.
var copyArray = [...memberArray] 혹은 Array.from(memberArray); 를 사용하여 똑같은 값을 가져오는 객체를 생성할 수 있음. (깊은복사)
이 경우 copyArray의 값을 바꿔도 memberArray의 값은 바뀌지 않는다.

2) 상속
java에서는 클래스끼리만 상속이 가능하지만, js는 객체와 객체간 상속도 가능함.
1) 클래스끼리 상속 - 
class A{
생성자함수 및 생성자
}
sum () {
return ~

class B extends A {
super (A의 생성자) --> A에 들어온 값을 B에서도 그대로 사용 가능하며,
B 클래스에서 새로 생성자를 추가해 고쳐 사용할 수도 있음.

2) 객체끼리 상속 -  __proto__사용 or var subObj = Object.create(superObj);
let superObj = {name:'손웅정'}
let subObj = {age:32}; 
subObj.__proto__=superObj; 이렇게 사용하여 subObj에 name값을 상속받을 수 있음.
(단, subObj.name 자체에 값이 들어온 것이 아닌, subObj.__proto__.name에 들어온 것을 subObj.name이 가져다 쓰는 것임을 참고)

function의 매개변수에 기본값을 넣어줄 수도 있음.
function sum (x=0, y=0){
return x+y;
console.log (sum(10); 입력시 NaN이 아니라 0+10이 계산되어 10이 출력됨.

call과 bind 기능
***객체가 여럿 있어 함수 내 매개변수(this)가 어떤 것인지 구분하기 어렵다면,
bind를 사용하여 this를 지정해주어야 함.
sum.bind(kim); 을 사용시 kim 객체에 있던 값들이 this.생성자로 들어와 함수가 실행된다.

------

react 구동을 위해 node 설치 후, react app을 cmd에서 설치 및 실행
vscode에서는 터미널 중 cmd로 실행.
구동된 부분 중 flex로 되어 있는 부분을 사용자가 직접 수정한다.

index.js 중 <App > 태그는 같은 폴더의 App.js를 import.
따라서 app 태그에 대한 내용을 변경하려면 App.js의 값을 수정한다.
App.js에는 export default App;을 추가하여 외부에서 <App> 태그를 이용해 불러올 수 있음.
* import시 나오는 파일 경로에 확장자가 없는 경우는 js가 생략된 것.
기존 HTML과는 다르게, 태그 안에 있는 내용을 유사 HTML을 이용하고, 새로 컴포넌트(태그)를 만들어
태그를 쓰기만 해도 안 내용을 불러오거나, 내용을 수정할 수 있음. (react의 역할)