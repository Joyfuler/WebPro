태그(컴포넌트)만으로 태그 안의 내용을 가져오는 법 - 해당 컴포넌트 이름으로 클래스를 만들고 Component 상속.
Render (  return ( ); ) 안에 유사 html을 입력. (html을 그대로 입력하더라도 적용은 가능)
단, 같은 파일에 컴포넌트를 정의하는 클래스를 모두 넣기에는 내용이 길어지고, 가독성이 떨어짐.
따라서 component 폴더를 만들어 각 클래스를 js 파일로 만들고, 원본에는 import 클래스명 from "경로",
분리한 클래스에는 export default '분리한 클래스명' 으로 서로 이어주면 됨.

App 태그에 입력한 props(속성)에 따라 표시되는 결과가 바뀌게 하려면?
App.js에는 태그에 props를 추가
<Subject title= "WEB sub = "World Wide Web"></Subject>
Subject.js에는 {this.props.속성명} 추가
{this.props.title} {this.props.sub}를 추가하여, App.js에 추가한 props에 따라 다른 내용을 출력하도록 바꿀 수 있음.

-- 
a href 태그의 경우 클릭하면 새 url로 이동하는데, 이동 없이 기존 url에 컨텐츠가 변경되는 식으로 react를 사용하고 싶다면?
막고 싶은 곳의 컴포넌트(태그).js로 가서 클릭시 a태그가 발동하는 것을 막는다. -> 
App.js에서는 해당 함수에서 mode를 변경하고, 모드가 변경되었을 때 나오는 title과 desc 값을 변경해준다.

(Subject.js)
<a href ="/" onCLick = { e => {
e.epreventDefault(); this.props.onChangePage();

(App.js)
onChangePage={() => { this.setState({mode:'welcome'});    (객체를 태그에 삽입할 땐 꼭 {} 안에 넣기)

state의 mode를 클릭할 때마다 바뀌는 이벤트를 넣어주어 출력되는 데이터를 변경할 수 있음.
이후 if (this.state.mod ==='welcome'){
_title = this.state.welcome.title;
_desc = this.state.welcome.desc;

else if (this.state.mod ==='read'){
_title = (this.state.contents[i].id === this.state.selected_content_id){
_title = data.title;
_desc = data.desc;

2) onChangePage에는 onCLick의 매개변수 e 하나만 들어가지만, 2개를 넣는 경우 전자가 this를 대체하는 매개변수로, 후자가 id를 가리키는 매개변수로 사용 가능.
(매개변수 2개인 경우 화살표 함수 사용이 어려우니 이 경우에는 일반 함수를 사용하는 것을 추천)

* 일반함수의 경우 this등이 제대로 동작하기 위해선 .bind(this)가 필요하나, 화살표 함수의 경우는 함수 내에 this가 없어
.bind(this)가 필요 없다는 점을 참고하자.